# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def detectCycle1(self, head): # 56ms
        """
        :type head: ListNode
        :rtype: ListNode
        """
        a = set()
        while head:
            if head in a:
                return head
            else:
                a.add(head)
            head = head.next
            
        return None
        
    def detectCycle2(self, head): # 56ms
        """
        :type head: ListNode
        :rtype: ListNode
        """
        if head is None or head.next is None:
            return None
        slow = fast = head
        while(slow and fast and fast.next):
            slow = slow.next
            fast = fast.next.next
            if(slow == fast):
                a = head
                while slow != a:
                    a = a.next
                    slow = slow.next
                return a
        return None
